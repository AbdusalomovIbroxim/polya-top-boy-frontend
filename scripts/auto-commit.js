#!/usr/bin/env node

import { execSync } from 'child_process';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
function analyzeChanges() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    const diffOutput = execSync('git diff --cached --name-status', { encoding: 'utf8' });
    const files = diffOutput.trim().split('\n').filter(line => line);
    
    if (files.length === 0) {
      console.log('‚ùå No staged files found. Please add files first with: git add .');
      process.exit(1);
    }
    
    let type = 'chore';
    let description = 'update files';
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const hasNewFiles = files.some(file => file.startsWith('A'));
    const hasModifiedFiles = files.some(file => file.startsWith('M'));
    const hasDeletedFiles = files.some(file => file.startsWith('D'));
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
    const allFiles = files.map(file => file.split('\t')[1]);
    const newFiles = files.filter(file => file.startsWith('A')).map(file => file.split('\t')[1]);
    const modifiedFiles = files.filter(file => file.startsWith('M')).map(file => file.split('\t')[1]);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if (hasNewFiles) {
      if (newFiles.some(file => file.includes('component') || file.includes('Component'))) {
        type = 'feat';
        description = 'add new components';
      } else if (newFiles.some(file => file.includes('test') || file.includes('spec'))) {
        type = 'test';
        description = 'add tests';
      } else if (newFiles.some(file => file.includes('api') || file.includes('service'))) {
        type = 'feat';
        description = 'add new API functionality';
      } else {
        type = 'feat';
        description = 'add new files';
      }
    } else if (hasModifiedFiles) {
      if (modifiedFiles.some(file => file.includes('css') || file.includes('style'))) {
        type = 'style';
        description = 'update styles';
      } else if (modifiedFiles.some(file => file.includes('test') || file.includes('spec'))) {
        type = 'test';
        description = 'update tests';
      } else if (modifiedFiles.some(file => file.includes('readme') || file.includes('docs'))) {
        type = 'docs';
        description = 'update documentation';
      } else if (modifiedFiles.some(file => file.includes('package.json') || file.includes('dependencies'))) {
        type = 'chore';
        description = 'update dependencies';
      } else if (modifiedFiles.some(file => file.includes('config') || file.includes('setup'))) {
        type = 'chore';
        description = 'update configuration';
      } else {
        type = 'fix';
        description = 'fix issues';
      }
    } else if (hasDeletedFiles) {
      type = 'refactor';
      description = 'remove unused files';
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if (allFiles.some(file => file.includes('auth') || file.includes('login'))) {
      type = 'feat';
      description = 'improve authentication';
    } else if (allFiles.some(file => file.includes('error') || file.includes('bug'))) {
      type = 'fix';
      description = 'fix errors';
    } else if (allFiles.some(file => file.includes('performance') || file.includes('optimize'))) {
      type = 'perf';
      description = 'improve performance';
    }
    
    return { type, description };
  } catch (error) {
    console.error('Error analyzing changes:', error);
    return { type: 'chore', description: 'update project' };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–∏—Ç–∞
function createCommit() {
  try {
    const { type, description } = analyzeChanges();
    const commitMessage = `${type}: ${description}`;
    
    console.log(`ü§ñ Auto-generating commit: ${commitMessage}`);
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç
    execSync(`git commit -m "${commitMessage}"`, { stdio: 'inherit' });
    
    console.log('‚úÖ Commit created successfully!');
  } catch (error) {
    console.error('‚ùå Error creating commit:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
createCommit(); 